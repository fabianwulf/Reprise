package reprise.controls{	import flash.display.Bitmap;		import flash.display.BitmapData;	
	
	import reprise.ui.UIComponent;		/**	 * @author marco	 */	 	public class BitmapElement extends UIComponent	{		/***************************************************************************		*							public properties							   *		***************************************************************************/		public static var className : String = 'BitmapElement';				/***************************************************************************		*							protected properties						   *		***************************************************************************/		protected var m_smoothing : Boolean = true;		protected var m_image : Bitmap;		protected var m_imageDisplayed : Boolean;				/***************************************************************************		*							public methods								   *		***************************************************************************/		public function setSmoothing(enabled : Boolean) : void		{			m_smoothing = enabled;			if(m_image)			{				setBitmapData(m_image.bitmapData);			}		}				public function setBitmapData(bmpData : BitmapData) : void		{			createBitmapDisplay(bmpData);		}				/***************************************************************************		*							protected methods							   *		***************************************************************************/		override protected function initialize() : void			{				super.initialize();					}				protected override function initDefaultStyles() : void		{			m_elementDefaultStyles.setStyle('display', 'inline');		}				protected function createBitmapDisplay(bmpData : BitmapData) : void		{			if (m_image)			{				m_lowerContentDisplay.removeChild(m_image);			}			m_image = new Bitmap(bmpData, 'auto', m_smoothing);			m_lowerContentDisplay.addChild(m_image);			invalidate();		}				protected override function measure() : void		{			if (!m_image)			{				m_intrinsicWidth = 0;				m_intrinsicHeight = 0;				return;			}			m_intrinsicWidth = m_image.width;			m_intrinsicHeight = m_image.height;		}		protected override function draw() : void		{			if (m_image)			{				m_image.x = m_currentStyles.paddingLeft || 0;				m_image.y = m_currentStyles.paddingTop || 0;				m_imageDisplayed = true;				m_lowerContentDisplay.visible = true;			}		}	}}